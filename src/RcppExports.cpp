// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// match_rows
List match_rows(DataFrame z, DataFrame x);
RcppExport SEXP _MissCat_match_rows(SEXP zSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type z(zSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(match_rows(z, x));
    return rcpp_result_gen;
END_RCPP
}
// merge_duplicate_rows_large
DataFrame merge_duplicate_rows_large(DataFrame df);
RcppExport SEXP _MissCat_merge_duplicate_rows_large(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_duplicate_rows_large(df));
    return rcpp_result_gen;
END_RCPP
}
// match_rows_and_add_rowname
DataFrame match_rows_and_add_rowname(DataFrame A, DataFrame B);
RcppExport SEXP _MissCat_match_rows_and_add_rowname(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type A(ASEXP);
    Rcpp::traits::input_parameter< DataFrame >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(match_rows_and_add_rowname(A, B));
    return rcpp_result_gen;
END_RCPP
}
// supDist
double supDist(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _MissCat_supDist(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(supDist(x, y));
    return rcpp_result_gen;
END_RCPP
}
// count_compare
IntegerVector count_compare(IntegerMatrix& x, IntegerMatrix& dat, const std::string& hasNA);
RcppExport SEXP _MissCat_count_compare(SEXP xSEXP, SEXP datSEXP, SEXP hasNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type hasNA(hasNASEXP);
    rcpp_result_gen = Rcpp::wrap(count_compare(x, dat, hasNA));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MissCat_match_rows", (DL_FUNC) &_MissCat_match_rows, 2},
    {"_MissCat_merge_duplicate_rows_large", (DL_FUNC) &_MissCat_merge_duplicate_rows_large, 1},
    {"_MissCat_match_rows_and_add_rowname", (DL_FUNC) &_MissCat_match_rows_and_add_rowname, 2},
    {"_MissCat_supDist", (DL_FUNC) &_MissCat_supDist, 2},
    {"_MissCat_count_compare", (DL_FUNC) &_MissCat_count_compare, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MissCat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
