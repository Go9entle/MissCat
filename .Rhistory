usethis::use_data_raw()
library(Rcpp)
Rcpp::compileAttributes()
devtools::load_all(".")
Rcpp.package.skeleton()
library(Rcpp)
Rcpp.package.skeleton()
13.95*9.1
load("C:/Users/14710/Desktop/2425Autumn/Rpackage/MissCat/data/tract2221.rda")
dat <- tract2221
p <- ncol(dat)
n_obs <- nrow(dat)
mx_my_compare <- function(DT_x, DT_y) {
if (ncol(DT_x) != ncol(DT_y)) stop("ncol of DT_x and DT_y do not match.")
## 0. Pre-processing: convert factors to integers
data.table::setDT(DT_x); data.table::setDT(DT_y)
res <- vector("list", length= nrow(DT_x))
join_cols <- names(DT_x)
DT_y[, rowid := .I]
for (s in seq_len(nrow(DT_x))) {
tmp <- DT_x[s,] #获取当前行的内容
na_idx <- which(apply(tmp, 1, is.na)) #判断当前行是否有缺失值
if (length(na_idx) > 0) { #若有一个及以上缺失值
res[[s]] <- DT_y[tmp, on= join_cols[-na_idx]]$rowid  #按DT_y去掉DT_x中含有缺失值的列进行匹配
}
else {
res[[s]] <- DT_y[tmp, on= join_cols]$rowid #没有缺失值则精准匹配
}
}
DT_y[, rowid := NULL]
return(res)
#返回一个列表 res，每个元素是与 DT_x 每一行匹配的 DT_y 行的索引。
}
library(imputeMulti)
data.table::setDT(dat)
if (!all(unlist(lapply(dat, is.factor)))) {dat <- dat[, lapply(.SD, as.factor)]}
#检查 dat 中的所有列是否为因子类型；若不是，将其转换为因子。
enum <- expand.grid(sapply(dat, function(x) return(c(levels(x), NA)))) #对dat中每一列
enum_comp <- enum[stats::complete.cases(enum),]
enum_miss <- enum[!stats::complete.cases(enum),]
enum_miss <- enum_miss[apply(enum_miss, 1, function(x) !all(is.na(x))),] # not all missing
data.table::setDT(enum_comp)
rownames(enum_comp) <- seq_len(nrow(enum_comp))
dat_comp <- dat[stats::complete.cases(dat),]
dat_miss <- dat[!stats::complete.cases(dat),]#只要样本有NA就归到这里
test1 <- mx_my_compare(dat,enum_comp)
test2 <- mx_my_compare(dat_miss,enum_comp) #一个完整肯定只对应一个！
View(test1)
View(test2)
rm(list=ls())
library("Rcpp")
Rcpp::compileAttributes()
DA_multinomial <- function(dat,
conj_prior = c("none", "data.dep", "flat.prior", "non.informative"),
alpha = NULL, burnin = 100, post_draws = 10000) {
# Validate prior options and handle missing alpha parameter if required
conj_prior <- match.arg(conj_prior, several.ok = FALSE) # Match the prior choice
if (conj_prior %in% c("data.dep", "flat.prior") & is.null(alpha)) {
stop("Please supply argument alpha as prior.") # If alpha is missing, stop execution
}
mc <- match.call() # Capture the function call for the object
p <- ncol(dat) # Number of columns (variables) in the dataset
n_obs <- nrow(dat) # Number of observations in the dataset
# Step 1: Data Preprocessing
data.table::setDT(dat) # Convert to data.table for efficiency
if (!all(unlist(lapply(dat, is.factor)))) {
dat <- dat[, lapply(.SD, as.factor)] # Ensure all columns are factors
}
# Create all possible combinations of factor levels for complete and missing data
enum <- expand.grid(sapply(dat, function(x) return(c(levels(x), NA))))
enum_comp <- enum[stats::complete.cases(enum), ]  # Complete cases
enum_miss <- enum[!stats::complete.cases(enum), ] # Incomplete cases with missing values
enum_miss <- enum_miss[apply(enum_miss, 1, function(x) !all(is.na(x))), ] # Remove rows where all values are NA
data.table::setDT(enum_comp)
rownames(enum_comp) <- seq_len(nrow(enum_comp)) # Set rownames for easy referencing
# Split dataset into complete and incomplete data
dat_comp <- dat[stats::complete.cases(dat),] # Complete data
dat_miss <- dat[!stats::complete.cases(dat),] # Missing data
# Convert to integer representation for efficient computation
enum_comp_int <- do.call("cbind", lapply(enum_comp, fact_to_int))
enum_miss_int <- do.call("cbind", lapply(enum_miss, fact_to_int))
dat_miss_int <- do.call("cbind", lapply(dat_miss, fact_to_int))
# Efficiently match incomplete data with complete data
enum_comp_int1 <- as.data.table(enum_comp_int)
z_Os_y0 <- data.table::setDT(merge_duplicate_rows_large(dat_miss_int))
z_Os_y <- data.table::setDT(match_rows_and_add_rowname(z_Os_y0, enum_miss_int))
z_Os_y1 <- z_Os_y[, rowname := as.integer(rownames(z_Os_y))]
setorder(z_Os_y1, rowname)
rownames(z_Os_y1) <- z_Os_y1$rowname
z_Os_y <- z_Os_y1[, rowname := NULL]
search_out <- mx_my_compare(z_Os_y[, 1:p], enum_comp_int1)
rm(z_Os_y0, z_Os_y1)
# Step 2: Iterative (I-step) and Maximization (M-step) of Data Augmentation Algorithm
iter <- 0
while (iter < burnin) {
# I-step: Calculate the expected counts and log-likelihood
log_lik <- log_lik0 <- 0
enum_comp$counts <- 0
# Loop over missing rows and update counts
for (s in 1:nrow(z_Os_y)) {
b_Os_y <- sum(enum_comp$theta_y[unlist(comp_ind[[s]])])
E_Xsy_Zy_theta <- as.vector(stats::rmultinom(1, size = z_Os_y$counts[s],
prob = enum_comp$theta_y[unlist(comp_ind[[s]])] / b_Os_y))
enum_comp$counts[unlist(comp_ind[[s]])] <- enum_comp$counts[unlist(comp_ind[[s]])] + E_Xsy_Zy_theta
if (b_Os_y > 0) {
log_lik <- log_lik + z_Os_y$counts[s] * log(b_Os_y)
}
}
# Add observed counts to expected counts
enum_comp$counts[as.integer(rownames(x_y))] <- enum_comp$counts[as.integer(rownames(x_y))] + x_y$counts
log_lik <- log_lik + sum(ifelse(enum_comp$theta_y[as.integer(rownames(x_y))] == 0, 0,
x_y$counts * log(enum_comp$theta_y[as.integer(rownames(x_y))])))
# M-step: Maximize the log-likelihood by updating parameters
if (conj_prior == "none") {
enum_comp$theta_y1 <- as.vector(gtools::rdirichlet(n = 1, alpha = enum_comp$counts + 1)) # Non-informative prior
} else {
enum_comp$theta_y1 <- as.vector(gtools::rdirichlet(n = 1, alpha = enum_comp$counts + enum_comp$alpha)) # Informative prior
}
iter <- iter + 1
enum_comp$theta_y <- enum_comp$theta_y1
log_lik0 <- log_lik
}
# Step 3: Posterior draws and parameter estimation
if (conj_prior != "none") {
log_lik <- log_lik + sum(ifelse(enum_comp$alpha == 0 | enum_comp$theta_y == 0, 0,
enum_comp$alpha * log(enum_comp$theta_y)))
}
# Generate posterior samples for parameter estimation
if (conj_prior == "none") {
theta_post <- gtools::rdirichlet(n = post_draws, alpha = enum_comp$counts + 1)
enum_comp$theta_y <- colMeans(theta_post)
} else {
theta_post <- gtools::rdirichlet(n = post_draws, alpha = enum_comp$counts + enum_comp$alpha)
enum_comp$theta_y <- colMeans(theta_post)
}
enum_comp$theta_y1 <- NULL
enum_comp$counts <- NULL
# Return the results as an object of class 'mod_imputeMulti'
mod <- methods::new("mod_imputeMulti",
method = "DA",
mle_call = mc,
mle_iter = iter,
mle_log_lik = log_lik,
mle_cp = conj_prior,
mle_x_y = enum_comp)
return(mod)
}
